<#
.SYNOPSIS
MailboxFolderPermissions.ps1 - Mailbox folder permissions report generation script.

.DESCRIPTION 
Generates a report of permissions that have been set on a folder

.OUTPUTS
Single mailbox reports are output to the console, while all other
reports are output to a CSV file.

.PARAMETER all
Generates a report for all mailboxes in the organization.

.PARAMETER server
Generates a report for all mailboxes on the specified server.

.PARAMETER database
Generates a report for all mailboxes on the specified database.

.PARAMETER file
Generates a report for mailbox names listed in the specified text file.

.PARAMETER mailbox
Generates a report only for the specified mailbox.

.PARAMETER filename
(Optional) Specifies the CSV file name to be used for the report.
If no file name specificed then a unique file name is generated by the script.

.EXAMPLE
.\MailboxFolderPermissions.ps1 -database HO-MB-01
Returns a report with the mailbox statistics for all mailbox users in
database HO-MB-01

.EXAMPLE
.\MailboxFolderPermissions.ps1 -file .\users.txt
Returns a report with the mailbox statistics for all mailbox users in
the file users.txt. Text file should contain names in a format that
will work for Get-Mailbox, such as the display name, alias, or primary
SMTP address.

.EXAMPLE
.\MailboxFolderPermissions.ps1 -server ex2010-mb1
Generates a report with the mailbox statisitcs for all mailbox users
on ex2010-mb1

.EXAMPLE
.\MailboxFolderPermissions.ps1 -server ex2010-mb1 -filename ex2010-mb1.csv
Generates a report with the mailbox statisitcs for all mailbox users
on ex2010-mb1, and uses the custom file name of ex2010-mb1.csv

.LINK
https://paweljarosz.wordpress.com/2016/05/07/powershell-script-to-check-permissions-on-mailbox-folders-also-recursively

.NOTES
Written By: Pawe³ Jarosz
As a base used script for mailbox report created by Paul Cunningham -> http://exchangeserverpro.com/get-mailboxreport-ps1-v1-02-released/

Find me on:
* My Blog:	https://paweljarosz.wordpress.com/
* LinkedIn:	https://www.linkedin.com/in/paweljarosz2
* GoldenLine: 	http://www.goldenline.pl/pawel-jarosz2/
* Github:	https://github.com/zaicnupagadi


Change Log:
V1.00, 01/05/2016 - Initial version

#>


param(
	[Parameter(ParameterSetName='database')] [string]$database,
	[Parameter(ParameterSetName='file')] [string]$file,
	[Parameter(ParameterSetName='server')] [string]$server,
	[Parameter(ParameterSetName='mailbox')] [string]$mailbox,
	[Parameter(ParameterSetName='all')] [switch]$all,
	[string]$filename
)

#...................................
# Variables
#...................................

$ErrorActionPreference = "SilentlyContinue"
$WarningPreference = "SilentlyContinue"
$global:report = @()
$EmailDomains =@()
$User_Member_Report =@()
$Group_Member_Report = @()
$global:New_Groups = @()

#Set recipient scope
$2007snapin = Get-PSSnapin -Name Microsoft.Exchange.Management.PowerShell.Admin
if ($2007snapin)
{
	$AdminSessionADSettings.ViewEntireForest = 1
}
else
{
	$2010snapin = Get-PSSnapin -Name Microsoft.Exchange.Management.PowerShell.E2010
	if ($2010snapin)
	{
		Set-ADServerSettings -ViewEntireForest $true
	}
}


#If no filename specified, generate report file name with random strings for uniqueness
#Thanks to @proxb and @chrisbrownie for the help with random string generation

if ($filename)
{
	$global:reportfile = $filename
}
else
{
	#$timestamp = Get-Date -UFormat %Y%m%d-%H%M
	#$random = -join(48..57+65..90+97..122 | ForEach-Object {[char]$_} | Get-Random -Count 6)
	#$global:reportfile = "MailboxReport-$timestamp-$random.csv"
    $global:reportfile = "FolderPermissions.csv"
}


#...................................
# Script
#...................................

#Add dependencies
Import-Module ActiveDirectory

#Get the mailbox list

Write-Host -ForegroundColor White "Collecting mailbox list"

if($all) { $mailboxes = @(Get-Mailbox -resultsize unlimited -IgnoreDefaultScope) }

if($server) { $mailboxes = @(Get-Mailbox -server $server -resultsize unlimited -IgnoreDefaultScope) }

if($database){ $mailboxes = @(Get-Mailbox -database $database -resultsize unlimited -IgnoreDefaultScope) }

if($file) {	$mailboxes = @(Get-Content $file | Get-Mailbox -resultsize unlimited) }

if($mailbox) { $mailboxes = @(Get-Mailbox $mailbox) }

#Get the report

Function CheckPermissionsRecursively ([string[]]$Groups, $Perms, $FolderPath, $alias) {

    ForEach ($Group in $Groups){
    
    #Write-host "Parametr" $Group
    $Group_Members = Get-AdGroupMember $Group
    }
        ForEach ($Group_Member in $Group_Members){
        
            if ($Group_Member.objectClass -eq "User"){
            $User_Member_Report += $Group_Member
            } else {
            if ($Group_Member.objectClass -eq "group"){
            $Group_Member_Report += $Group_Member.name
            $global:New_Groups += $Group_Member.name

                $userObj = New-Object PSObject
                $Perms = [string]::Join("|",$Folder_Permission.accessrights)
                $userObj | Add-Member NoteProperty -Name "MailboxName" -Value $alias
                $userObj | Add-Member NoteProperty -Name "FolderName" -Value $Folder_Path 
                $userObj | Add-Member NoteProperty -Name "UserName" -Value $Group_Member.name
                $userObj | Add-Member NoteProperty -Name "Type" -Value $ObjectClass
                $userObj | Add-Member NoteProperty -Name "AccessRights" -Value $Perms
                $userObj | Add-Member NoteProperty -Name "Dependency" -Value "1"
                $userObj | Add-Member NoteProperty -Name "IsDirect" -Value $Group
                        
                $global:report += $userObj
           
            }
          CheckPermissionsRecursively $global:New_Groups $Perms $FolderPath $alias
        } 
         
        

    }
       
}

Write-Host -ForegroundColor White "Collecting report data"

$mailboxcount = $mailboxes.count
$i = 0
$Mbx_perms =@()
#Loop through mailbox list and find the aged mailboxes
foreach ($mb in $mailboxes)
{
$Dep=0
$alias = $mb.alias.tostring()
	$i = $i + 1
	$pct = $i/$mailboxcount * 100
	Write-Progress -Activity "Collecting mailbox details" -Status "Processing mailbox $i of $mailboxcount - $mb" -PercentComplete $pct

	$Mbx_folders = Get-MailboxFolderStatistics $mb
	ForEach ($Mbx_folder in $Mbx_folders) {
    $Folder_Path = $Mbx_folder.folderpath.replace("/","\").replace([char]63743,"/")
    #$Folder_Path
    $Mbx_perms = Get-mailboxfolderpermission $alias':'$Folder_Path | ? {$_.AccessRights -notcontains "None"}
        
        ForEach ($Folder_Permission in $Mbx_perms){
        
        if ($Folder_Permission.user.displayname -match "NT User:S-") {$ObjectClass = "ABANDONED";$Objectname =$Folder_Permission.user.displayname.tostring().replace("NT User:","") }
        elseif ($Folder_Permission.user.displayname -match 'NT User:') {
        $1,$ObjectName = $Folder_Permission.user.displayname.split("\",2)
        } else {$ObjectName = $Folder_Permission.user.displayname}
                
        $a = get-aduser -filter {displayname -eq $ObjectName} 
            if ($a.name) {$ObjectClass = $a.ObjectClass;$name = $a.name
            } else {
            $b = get-adgroup $ObjectName -erroraction silentlycontinue
                if ($b.name) {$ObjectClass = $b.ObjectClass;$name = $b.name
                }
            }
        
            if (($Folder_Permission.accessrights -and $ObjectName -notmatch "Default") -and $ObjectName -notmatch $mb.alias -and $name -notmatch $mb.displayname){
            $Dep = 1
            if ($ObjectClass -eq "group") {
            $Perms = [string]::Join("|",$Folder_Permission.accessrights)
            CheckPermissionsRecursively $ObjectName $Perms $Folder_Path $alias
            } else {
            $userObj = New-Object PSObject
            $Perms = [string]::Join("|",$Folder_Permission.accessrights)
            $userObj | Add-Member NoteProperty -Name "MailboxName" -Value $alias
            $userObj | Add-Member NoteProperty -Name "FolderName" -Value $Folder_Path 
            $userObj | Add-Member NoteProperty -Name "UserName" -Value $ObjectName
            $userObj | Add-Member NoteProperty -Name "Type" -Value $ObjectClass
            $userObj | Add-Member NoteProperty -Name "AccessRights" -Value $Perms
            $userObj | Add-Member NoteProperty -Name "Dependency" -Value $Dep
            $userObj | Add-Member NoteProperty -Name "IsDirect" -Value "YES"
          
            $global:report += $userObj
            }
            }

       } 
       
     }
    if ($Dep -eq 0) {
    $userObj = New-Object PSObject
            $userObj | Add-Member NoteProperty -Name "MailboxName" -Value $alias
            $userObj | Add-Member NoteProperty -Name "FolderName" -Value $NULL 
            $userObj | Add-Member NoteProperty -Name "UserName" -Value $NULL
            $userObj | Add-Member NoteProperty -Name "Type" -Value $NULL
            $userObj | Add-Member NoteProperty -Name "AccessRights" -Value $NULL
            $userObj | Add-Member NoteProperty -Name "Dependency" -Value $Dep
            $userObj | Add-Member NoteProperty -Name "IsDirect" -Value $NULL
    $global:report += $userObj
    }

}
#$global:report
#Catch zero item results
$global:reportcount = $global:report.count

if ($global:reportcount -eq 0)
{
	Write-Host -ForegroundColor Yellow "No mailboxes were found matching that criteria."
}
else
{
	if ($mailbox) 
	{
		#$global:report | Format-List
        $pp = import-csv $global:reportfile
        #$global:report
        $export = $pp + $global:report
        #$export
        $export| Export-Csv $global:reportfile -NoTypeInformation
		Write-Host -ForegroundColor White "Report written to $global:reportfile in current path."
		Get-Item $global:reportfile
	}
	else
	{
        $pp = import-csv $global:reportfile
        #$global:report
        $export = $pp + $global:report
        #$export
        $export| Export-Csv $global:reportfile -NoTypeInformation
		Write-Host -ForegroundColor White "Report written to $global:reportfile in current path."
		Get-Item $global:reportfile
	}
}
